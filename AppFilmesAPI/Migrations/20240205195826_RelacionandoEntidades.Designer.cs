// <auto-generated />
using System;
using AppFilmesAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppFilmesAPI.Migrations
{
    [DbContext(typeof(AppFilmesContext))]
    [Migration("20240205195826_RelacionandoEntidades")]
    partial class RelacionandoEntidades
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppFilmesAPI.Models.Artista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("DataNascimento");

                    b.Property<int>("Idade")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("DATEDIFF(YEAR, DataNascimento, GETDATE())");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Artistas", (string)null);
                });

            modelBuilder.Entity("AppFilmesAPI.Models.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Ano");

                    b.Property<string>("Diretor")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Diretor");

                    b.Property<int>("Duracao")
                        .HasColumnType("int")
                        .HasColumnName("Duracao(min.)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Genero");

                    b.Property<double>("Nota")
                        .HasColumnType("float")
                        .HasColumnName("Nota");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Filmes", (string)null);
                });

            modelBuilder.Entity("ArtistaFilme", b =>
                {
                    b.Property<int>("ElencoId")
                        .HasColumnType("int");

                    b.Property<int>("FilmografiaId")
                        .HasColumnType("int");

                    b.HasKey("ElencoId", "FilmografiaId");

                    b.HasIndex("FilmografiaId");

                    b.ToTable("ArtistaFilme");
                });

            modelBuilder.Entity("ArtistaFilme", b =>
                {
                    b.HasOne("AppFilmesAPI.Models.Artista", null)
                        .WithMany()
                        .HasForeignKey("ElencoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppFilmesAPI.Models.Filme", null)
                        .WithMany()
                        .HasForeignKey("FilmografiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
